import React from 'react';
import ReactDOM from 'react-dom';
import renderer from 'react-test-renderer';
import App from './App';
import * as serviceWorker from './serviceWorker';

/* istanbul ignore next */


it('renders the App component on the DOM', () => {
    const tree = renderer.create(<App />).toJSON()
    expect(tree).toMatchSnapshot()
})

// test('test the ReactDOM.rendrer function', () => {
//     const spy = jest.spyOn(ReactDOM, 'render');
//     const selectorMock = jest.fn()
//     const appMock = jest.fn()
//     ReactDOM.render(appMock, selectorMock);
  
//     expect(spy).toHaveBeenCalled();
  
//     spy.mockRestore();
// });

test('test the serviceWorker unregister function', () => {
    const spy = jest.spyOn(serviceWorker, 'unregister');
    serviceWorker.unregister();
  
    expect(spy).toHaveBeenCalled();
  
    spy.mockRestore();
});

describe("test ReactDOM.render", () => {
    const originalRender = ReactDOM.render;
    const originalGetElement = global.document.getElementById;
    beforeEach(() => {
      global.document.getElementById = () => true;
      ReactDOM.render = jest.fn();
    });
    afterAll(() => {
      global.document.getElementById = originalGetElement;
      ReactDOM.render = originalRender;
    });
    it("should call ReactDOM.render", () => {
        originalRender
      expect(ReactDOM.render).toHaveBeenCalled();
    });
  });